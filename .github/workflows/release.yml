name: release

on:
  push:
    tags: ["v*"]
    branches: ["release", "win", "docs"]
  workflow_dispatch:

concurrency:
  group: release-${{ github.ref_name }}

env:
  CARGO_TERM_COLOR: always
  CARGO_INCREMENTAL: 0
  DRY_RUN: ${{ startsWith(github.event.ref, 'refs/tags/v') && '0' || '1' }}

jobs:
  build-tarball:
    name: build-tarball-${{matrix.name}}
    runs-on: ${{matrix.runs-on}}
    timeout-minutes: 45
    env:
      #RUSTC_WRAPPER: sccache
      SCCACHE_ENDPOINT: minio.jdx.dev
      SCCACHE_BUCKET: sccache
      SCCACHE_REGION: auto
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu
            name: linux-32bits-gnu
            target: i586-unknown-linux-gnu
            runs-on: ubuntu-latest

          - os: ubuntu
            name: linux-32bits-musl
            target: i586-unknown-linux-musl
            runs-on: ubuntu-latest


          - os: ubuntu
            name: linux-64bits-gnu
            target: x86_64-unknown-linux-gnu
            runs-on: ubuntu-latest

          - os: ubuntu
            name: linux-64bits-musl
            target: x86_64-unknown-linux-musl
            runs-on: ubuntu-latest


          - os: ubuntu
            name: linux-arm64-android
            target: aarch64-linux-androideabi
            runs-on: ubuntu-latest

          - os: ubuntu
            name: linux-arm-android
            target: arm-linux-androideabi
            runs-on: ubuntu-latest


          - os: ubuntu
            name: linux-arm-gnu
            target: arm-unknown-linux-gnueabi
            runs-on: ubuntu-latest

          - os: ubuntu
            name: linux-arm-musl
            target: arm-unknown-linux-musleabi
            runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4
      - uses: mozilla-actions/sccache-action@v0.0.4
      - name: cache crates
        id: cache-crates
        uses: actions/cache@v4
        with:
          path: ~/.cargo/registry/cache
          key: cargo-registry-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: cargo-registry
      - if: matrix.runs-on != 'ubuntu-latest'
        run: rustup target add ${{matrix.target}}
      - if: matrix.runs-on == 'ubuntu-latest'
        uses: taiki-e/install-action@cross
      - name: build-tarball
        uses: nick-fields/retry@v3
        with:
          timeout_minutes: 20
          max_attempts: 3
          command: scripts/build-tarball.sh ${{matrix.target}}

      # - name: Create Release
      #   id: create_release
      #   uses: actions/create-release@v1
      #   env:
      #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      #   with:
      #     tag_name: 'mise-latest'
      #     release_name: 'mise-latest'
      #     draft: false
      #     prerelease: false

      - name: Upload Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: dist/mise/bin/mise
          asset_name: mise-${{ matrix.name }}
          asset_content_type: application/octet-stream

      - uses: taiki-e/install-action@v2
        with: { tool: cargo-cache }
      - if: steps.cache-crates.outputs.cache-hit != 'true'
        run: cargo cache --autoclean
      - run: ${SCCACHE_PATH} --show-stats
